{"version":3,"sources":["features/Calculator/NumberSelect.tsx","features/Calculator/DurationSelect.tsx","features/Calculator/DistanceSelect.tsx","features/Calculator/PaceSelect.tsx","features/Calculator/Calculator.tsx","App.tsx","index.tsx"],"names":["NumberSelect","props","useState","isActive","setIsActive","displayValue","value","pad","toString","padStart","parseInt","handleOptionClick","event","currentTarget","getAttribute","onChange","handleMouseDownOutside","target","classList","contains","useEffect","document","addEventListener","removeEventListener","className","classNames","onClick","wasActive","options","i","max","push","map","option","key","data-value","createRenderedOptions","DurationSelect","handleChange","fragmentName","fragments","toDuration","toSeconds","hours","minutes","seconds","date","Date","getUTCHours","getUTCMinutes","getSeconds","durationFragments","label","name","DistanceSelect","toDistanceFragments","meters","km","Math","floor","m","toMeters","distanceFragments","PaceSelect","toPace","pace","paceFragments","calculateDistance","duration","paceInKilometers","round","calculateDuration","distance","durationInMinutes","calculatePace","paceInMinutes","Calculator","defaultState","changedFields","useReducer","prevState","action","type","field","payload","getValue","fieldName","val","filter","f","slice","shouldCalculate","length","find","changedField","Error","state","dispatch","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bff7a648.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport classNames from 'classnames'\nimport './NumberSelect.scss'\n\ninterface NumberSelectProps {\n  name: string\n  value: number\n  onChange: (value: number) => void\n  max: string\n  pad?: string\n}\n\nconst NumberSelect = (props: NumberSelectProps) => {\n  const [isActive, setIsActive] = useState(false)\n\n  const displayValue = (value: number): string => {\n    return props.pad ? value.toString().padStart(parseInt(props.pad, 10), '0') : value.toString()\n  }\n\n  const handleOptionClick = (event: React.MouseEvent<HTMLElement>) => {\n    const value = event.currentTarget.getAttribute('data-value')\n    if (value === null) return\n    setIsActive(false)\n    props.onChange(parseInt(value, 10))\n  }\n\n  const handleMouseDownOutside = (event: globalThis.MouseEvent | globalThis.TouchEvent) => {\n    const target = event.target as HTMLElement\n    if (!target.classList.contains('number-select__option') && !target.classList.contains('number-select__value')) {\n      setIsActive(false)\n    }\n  }\n\n  const createRenderedOptions = () => {\n    const options = []\n\n    for (let i = 0; i <= parseInt(props.max, 10); i++) {\n      options.push({ displayValue: displayValue(i), value: i })\n    }\n\n    return options.map((option) => {\n      return (\n        <div\n          className={classNames({\n            'number-select__option': true,\n            'number-select__option--selected': option.value === props.value,\n          })}\n          key={option.displayValue}\n          data-value={option.value}\n          onClick={handleOptionClick}\n        >\n          {option.displayValue}\n        </div>\n      )\n    })\n  }\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleMouseDownOutside, false)\n    return () => {\n      document.removeEventListener('mousedown', handleMouseDownOutside, false)\n    }\n  })\n\n  return (\n    <div className={classNames({ 'number-select': true, 'number-select--active': isActive })}>\n      <div className=\"number-select__wrapper\">\n        <div className=\"number-select__value\" onClick={() => setIsActive((wasActive) => !wasActive)}>\n          {displayValue(props.value)}\n        </div>\n        <div className=\"number-select__options\">{createRenderedOptions()}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default NumberSelect\n","import React from 'react'\nimport NumberSelect from './NumberSelect'\nimport './DurationSelect.scss'\n\ntype DurationFragmentName = 'hours' | 'minutes' | 'seconds'\n\ninterface DurationFragments {\n  hours: number\n  minutes: number\n  seconds: number\n}\n\ninterface DurationSelectProps {\n  label: string\n  value: number\n  onChange: (value: number) => void\n}\n\nconst DurationSelect = (props: DurationSelectProps) => {\n  const handleChange = (fragmentName: DurationFragmentName, value: number) => {\n    const fragments = toDuration(props.value)\n    fragments[fragmentName] = value\n    props.onChange(toSeconds(fragments))\n  }\n\n  const toSeconds = (fragments: DurationFragments): number => {\n    const hours = fragments.hours * 3600\n    const minutes = fragments.minutes * 60\n    return hours + minutes + fragments.seconds\n  }\n\n  const toDuration = (seconds: number): DurationFragments => {\n    const date = new Date(seconds * 1000)\n    return {\n      hours: date.getUTCHours(),\n      minutes: date.getUTCMinutes(),\n      seconds: date.getSeconds(),\n    }\n  }\n\n  const durationFragments = toDuration(props.value)\n\n  return (\n    <div className=\"duration-select\">\n      <div className=\"duration-select__label\">{props.label}</div>\n      <div className=\"duration-select__input\">\n        <NumberSelect\n          name=\"hours\"\n          value={durationFragments.hours}\n          max=\"23\"\n          onChange={(value) => handleChange('hours', value)}\n        />\n        <span className=\"duration-select__value-label\">hrs</span>\n        <NumberSelect\n          name=\"minutes\"\n          value={durationFragments.minutes}\n          max=\"59\"\n          pad=\"2\"\n          onChange={(value) => handleChange('minutes', value)}\n        />\n        <span className=\"duration-select__value-label\">min</span>\n        <NumberSelect\n          name=\"seconds\"\n          value={durationFragments.seconds}\n          max=\"59\"\n          pad=\"2\"\n          onChange={(value) => handleChange('seconds', value)}\n        />\n        <span className=\"duration-select__value-label\">sec</span>\n      </div>\n    </div>\n  )\n}\n\nexport default DurationSelect\n","import React from 'react'\nimport NumberSelect from './NumberSelect'\nimport './DistanceSelect.scss'\n\ntype DistanceFragmentName = 'km' | 'm'\n\ninterface DistanceFragments {\n  km: number\n  m: number\n}\n\ninterface DistanceSelectProps {\n  label: string\n  value: number\n  onChange: (value: number) => void\n}\n\nconst DistanceSelect = (props: DistanceSelectProps) => {\n  const toMeters = (fragments: DistanceFragments): number => fragments.km * 1000 + fragments.m\n\n  const toDistanceFragments = (meters: number): DistanceFragments => ({\n    km: Math.floor(meters / 1000),\n    m: meters % 1000,\n  })\n\n  const handleChange = (fragmentName: DistanceFragmentName, value: number) => {\n    const fragments = toDistanceFragments(props.value)\n    fragments[fragmentName] = value\n    props.onChange(toMeters(fragments))\n  }\n\n  const distanceFragments = toDistanceFragments(props.value)\n\n  return (\n    <div className=\"distance-select\">\n      <div className=\"distance-select__label\">{props.label}</div>\n      <div className=\"distance-select__input\">\n        <NumberSelect\n          name=\"km\"\n          value={distanceFragments.km}\n          max=\"100\"\n          onChange={(value) => handleChange('km', value)}\n        />\n        <span className=\"distance-select__separator\">.</span>\n        <NumberSelect\n          name=\"m\"\n          value={distanceFragments.m}\n          max=\"999\"\n          pad=\"3\"\n          onChange={(value) => handleChange('m', value)}\n        />\n        <span className=\"distance-select__value-label\">m</span>\n      </div>\n    </div>\n  )\n}\n\nexport default DistanceSelect\n","import React from 'react'\nimport NumberSelect from './NumberSelect'\nimport './PaceSelect.scss'\n\ntype PaceFragmentName = 'minutes' | 'seconds'\n\ninterface PaceSelectProps {\n  label: string\n  value: number\n  onChange: (value: number) => void\n}\n\ninterface PaceFragments {\n  minutes: number\n  seconds: number\n}\n\nconst PaceSelect = (props: PaceSelectProps) => {\n  const handleChange = (fragmentName: PaceFragmentName, value: number) => {\n    const fragments = toPace(props.value)\n    fragments[fragmentName] = value\n    props.onChange(toSeconds(fragments))\n  }\n\n  const toSeconds = (pace: PaceFragments): number => pace.minutes * 60 + pace.seconds\n  const toPace = (seconds: number): PaceFragments => ({ minutes: Math.floor(seconds / 60), seconds: seconds % 60 })\n  const paceFragments = toPace(props.value)\n\n  return (\n    <div className=\"pace-select\">\n      <div className=\"pace-select__label\">{props.label}</div>\n      <div className=\"pace-select__input\">\n        <NumberSelect\n          name=\"minutes\"\n          value={paceFragments.minutes}\n          max=\"59\"\n          onChange={(value) => handleChange('minutes', value)}\n        />\n        <span className=\"pace-select__separator\">:</span>\n        <NumberSelect\n          name=\"seconds\"\n          value={paceFragments.seconds}\n          max=\"59\"\n          pad=\"2\"\n          onChange={(value) => handleChange('seconds', value)}\n        />\n        <span className=\"pace-select__value-label\">min/km</span>\n      </div>\n    </div>\n  )\n}\n\nexport default PaceSelect\n","import React, { useReducer } from 'react'\nimport DurationSelect from './DurationSelect'\nimport DistanceSelect from './DistanceSelect'\nimport PaceSelect from './PaceSelect'\nimport './Calculator.scss'\n\ntype CalculatorField = 'duration' | 'distance' | 'pace'\n\ninterface CalculatorState {\n  duration: number\n  distance: number\n  pace: number\n  changedFields: CalculatorField[]\n}\n\ninterface CalculatorAction {\n  type: string\n  payload?: CalculatorChangePayload\n}\n\ninterface CalculatorChangePayload {\n  field: CalculatorField\n  value: number\n}\n\nconst calculateDistance = (duration: number, pace: number) => {\n  const durationInMinutes = duration / 60\n  const paceInMinutes = pace / 60\n  const paceInKilometers = durationInMinutes / paceInMinutes\n  return Math.round(paceInKilometers * 1000)\n}\n\nconst calculateDuration = (distance: number, pace: number) => {\n  const distanceInKilometers = distance / 1000\n  const paceInMinutes = pace / 60\n  const durationInMinutes = distanceInKilometers * paceInMinutes\n  return Math.round(durationInMinutes * 60)\n}\n\nconst calculatePace = (duration: number, distance: number) => {\n  const distanceInKilometers = distance / 1000\n  const durationInMinutes = duration / 60\n  const paceInMinutes = durationInMinutes / distanceInKilometers\n  return Math.round(paceInMinutes * 60)\n}\n\nconst Calculator = () => {\n  const defaultState = {\n    duration: 0,\n    distance: 0,\n    pace: 0,\n    changedFields: [],\n  } as CalculatorState\n\n  const reducer = (prevState: CalculatorState, action: CalculatorAction): CalculatorState => {\n    switch (action.type) {\n      case 'calculator/clear':\n        return defaultState\n\n      case 'calculator/change':\n        const field = action.payload?.field ? action.payload?.field : ''\n        const value = action.payload?.value\n\n        const getValue = (fieldName: CalculatorField) => {\n          const val = field === fieldName ? value : prevState[fieldName]\n          return val ? val : 0\n        }\n\n        const duration = getValue('duration')\n        const distance = getValue('distance')\n        const pace = getValue('pace')\n\n        const changedFields = [\n          ...prevState.changedFields.filter((f: CalculatorField) => f !== field).slice(-1),\n          field as CalculatorField,\n        ]\n\n        const shouldCalculate = (fieldName: CalculatorField): boolean => {\n          if (changedFields.length < 2) return false\n          return !changedFields.find((changedField: CalculatorField) => changedField === fieldName)\n        }\n\n        return {\n          duration: shouldCalculate('duration') ? calculateDuration(distance, pace) : duration,\n          distance: shouldCalculate('distance') ? calculateDistance(duration, pace) : distance,\n          pace: shouldCalculate('pace') ? calculatePace(duration, distance) : pace,\n          changedFields,\n        }\n\n      default:\n        throw new Error()\n    }\n  }\n\n  const [state, dispatch] = useReducer(reducer, defaultState)\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"calculator__header\">\n        <div>Pace Calculator</div>\n        <button onClick={() => dispatch({ type: 'calculator/clear' })}>Clear</button>\n      </div>\n      <DurationSelect\n        label=\"Time\"\n        value={state?.duration}\n        onChange={(value) => dispatch({ type: 'calculator/change', payload: { field: 'duration', value } })}\n      />\n      <DistanceSelect\n        label=\"Distance\"\n        value={state?.distance}\n        onChange={(value) => dispatch({ type: 'calculator/change', payload: { field: 'distance', value } })}\n      />\n      <PaceSelect\n        label=\"Pace\"\n        value={state?.pace}\n        onChange={(value) => dispatch({ type: 'calculator/change', payload: { field: 'pace', value } })}\n      />\n    </div>\n  )\n}\n\nexport default Calculator\n","import React from 'react'\nimport Calculator from './features/Calculator/Calculator'\nimport './App.scss'\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Calculator />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}