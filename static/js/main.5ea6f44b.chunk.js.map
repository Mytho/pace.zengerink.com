{"version":3,"sources":["components/Calculator/DurationSelect.tsx","components/Calculator/NumberSelect.tsx","components/Calculator/DistanceSelect.tsx","components/Calculator/PaceSelect.tsx","components/Calculator/Calculator.tsx","App.tsx","index.tsx"],"names":["DurationFragment","NumberSelect","props","state","active","toggleActive","bind","handleOptionClick","handleMouseDownOutside","document","addEventListener","this","removeEventListener","value","pad","toString","padStart","parseInt","event","target","classList","contains","setState","prevState","currentTarget","getAttribute","onChange","mainClassNames","classNames","options","i","max","push","displayValue","optionElements","map","option","optionClassNames","className","key","data-value","onClick","React","Component","DistanceFragment","DurationSelect","prop","duration","toDuration","toSeconds","Hours","Minutes","Seconds","seconds","date","Date","getUTCHours","getUTCMinutes","getSeconds","label","name","handleChange","PaceFragment","distance","toDistance","toMeters","Kilometers","Meters","meters","Math","floor","CalculatorValue","pace","toPace","Calculator","defaultState","DurationInSeconds","DistanceInMeters","PaceInSeconds","handleClear","paceInKilometers","round","durationInMinutes","paceInMinutes","calc","changed","find","item","Number","isFinite","nextState","some","shift","calculateStateProp","calculateDuration","calculateDistance","calculatePace","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5ea6f44b.chunk.js","sourcesContent":["import React from 'react'\nimport NumberSelect from './NumberSelect'\nimport './DurationSelect.scss'\n\nexport enum DurationFragment {\n  Hours = 'hours',\n  Minutes = 'minutes',\n  Seconds = 'seconds',\n}\n\ninterface DurationSelectProps {\n  label: string\n  value: number\n  onChange: (value: number) => void\n}\n\ninterface Duration {\n  [key: string]: number\n}\n\nexport default class DurationSelect extends React.Component<DurationSelectProps, {}> {\n  handleChange(prop: string, value: number) {\n    const duration = this.toDuration(this.props.value)\n    duration[prop] = value\n    this.props.onChange(this.toSeconds(duration))\n  }\n\n  toSeconds(duration: Duration): number {\n    const hours = duration[DurationFragment.Hours] * 3600\n    const minutes = duration[DurationFragment.Minutes] * 60\n\n    return hours + minutes + duration[DurationFragment.Seconds]\n  }\n\n  toDuration(seconds: number): Duration {\n    const date = new Date(seconds * 1000)\n\n    return {\n      [DurationFragment.Hours]: date.getUTCHours(),\n      [DurationFragment.Minutes]: date.getUTCMinutes(),\n      [DurationFragment.Seconds]: date.getSeconds(),\n    }\n  }\n\n  render() {\n    const duration = this.toDuration(this.props.value)\n\n    return (\n      <div className=\"duration-select\">\n        <div className=\"duration-select__label\">{this.props.label}</div>\n        <div className=\"duration-select__input\">\n          <NumberSelect\n            name={DurationFragment.Hours}\n            value={duration[DurationFragment.Hours]}\n            max=\"23\"\n            onChange={this.handleChange.bind(this, DurationFragment.Hours)}\n          />\n          <span className=\"duration-select__value-label\">hrs</span>\n          <NumberSelect\n            name={DurationFragment.Minutes}\n            value={duration[DurationFragment.Minutes]}\n            max=\"59\"\n            pad=\"2\"\n            onChange={this.handleChange.bind(this, DurationFragment.Minutes)}\n          />\n          <span className=\"duration-select__value-label\">min</span>\n          <NumberSelect\n            name={DurationFragment.Seconds}\n            value={duration[DurationFragment.Seconds]}\n            max=\"59\"\n            pad=\"2\"\n            onChange={this.handleChange.bind(this, DurationFragment.Seconds)}\n          />\n          <span className=\"duration-select__value-label\">sec</span>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { MouseEvent } from 'react'\nimport classNames from 'classnames'\nimport './NumberSelect.scss'\n\ninterface NumberSelectProps {\n  name: string\n  value: number\n  onChange: (value: number) => void\n  max: string\n  pad?: string\n}\n\ninterface NumberSelectState {\n  active: boolean\n}\n\nexport default class NumberSelect extends React.Component<NumberSelectProps, NumberSelectState> {\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      active: false,\n    }\n\n    this.toggleActive = this.toggleActive.bind(this)\n    this.handleOptionClick = this.handleOptionClick.bind(this)\n    this.handleMouseDownOutside = this.handleMouseDownOutside.bind(this)\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleMouseDownOutside, false)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleMouseDownOutside, false)\n  }\n\n  displayValue(value: number): string {\n    return this.props.pad ? value.toString().padStart(parseInt(this.props.pad, 10), '0') : value.toString()\n  }\n\n  handleMouseDownOutside(event: globalThis.MouseEvent | globalThis.TouchEvent) {\n    const target = event.target as HTMLElement\n    if (!target.classList.contains('number-select__option') && !target.classList.contains('number-select__value')) {\n      this.setState({\n        active: false,\n      })\n    }\n  }\n\n  toggleActive(event: React.MouseEvent<HTMLElement>) {\n    this.setState((prevState) => ({\n      active: !prevState.active,\n    }))\n  }\n\n  handleOptionClick(event: React.MouseEvent<HTMLElement>) {\n    const value = event.currentTarget.getAttribute('data-value')\n    if (value === null) {\n      return\n    }\n    this.setState({ active: false })\n    this.props.onChange(parseInt(value, 10))\n  }\n\n  render() {\n    const mainClassNames = classNames({\n      'number-select': true,\n      'number-select--active': this.state.active,\n    })\n\n    const options = []\n    for (let i = 0; i <= parseInt(this.props.max, 10); i++) {\n      options.push({ displayValue: this.displayValue(i), value: i })\n    }\n    const optionElements = options.map((option) => {\n      const optionClassNames = classNames({\n        'number-select__option': true,\n        'number-select__option--selected': option.value === this.props.value,\n      })\n      return (\n        <div\n          className={optionClassNames}\n          key={option.displayValue}\n          data-value={option.value}\n          onClick={this.handleOptionClick}\n        >\n          {option.displayValue}\n        </div>\n      )\n    })\n\n    return (\n      <div className={mainClassNames}>\n        <div className=\"number-select__wrapper\">\n          <div className=\"number-select__value\" onClick={this.toggleActive}>\n            {this.displayValue(this.props.value)}\n          </div>\n          <div className=\"number-select__options\">{optionElements}</div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport NumberSelect from './NumberSelect'\nimport './DistanceSelect.scss'\n\nexport enum DistanceFragment {\n  Kilometers = 'km',\n  Meters = 'm',\n}\n\ninterface DistanceSelectProps {\n  label: string\n  value: number\n  onChange: (value: number) => void\n}\n\ninterface Distance {\n  [key: string]: number\n}\n\nexport default class DurationSelect extends React.Component<DistanceSelectProps, {}> {\n  handleChange(prop: string, value: number) {\n    const distance = this.toDistance(this.props.value)\n    distance[prop] = value\n    this.props.onChange(this.toMeters(distance))\n  }\n\n  toMeters(distance: Distance): number {\n    return distance[DistanceFragment.Kilometers] * 1000 + distance[DistanceFragment.Meters]\n  }\n\n  toDistance(meters: number): Distance {\n    return {\n      [DistanceFragment.Kilometers]: Math.floor(meters / 1000),\n      [DistanceFragment.Meters]: meters % 1000,\n    }\n  }\n\n  render() {\n    const distance = this.toDistance(this.props.value)\n\n    return (\n      <div className=\"distance-select\">\n        <div className=\"distance-select__label\">{this.props.label}</div>\n        <div className=\"distance-select__input\">\n          <NumberSelect\n            name={DistanceFragment.Kilometers}\n            value={distance[DistanceFragment.Kilometers]}\n            max=\"100\"\n            onChange={this.handleChange.bind(this, DistanceFragment.Kilometers)}\n          />\n          <span className=\"distance-select__separator\">.</span>\n          <NumberSelect\n            name={DistanceFragment.Meters}\n            value={distance[DistanceFragment.Meters]}\n            max=\"999\"\n            pad=\"3\"\n            onChange={this.handleChange.bind(this, DistanceFragment.Meters)}\n          />\n          <span className=\"distance-select__value-label\">m</span>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport NumberSelect from './NumberSelect'\nimport './PaceSelect.scss'\n\nexport enum PaceFragment {\n  Minutes = 'minutes',\n  Seconds = 'seconds',\n}\n\ninterface PaceSelectProps {\n  label: string\n  value: number\n  onChange: (value: number) => void\n}\n\ninterface Pace {\n  [key: string]: number\n}\n\nexport default class DurationSelect extends React.Component<PaceSelectProps, {}> {\n  handleChange(prop: string, value: number) {\n    const pace = this.toPace(this.props.value)\n    pace[prop] = value\n    this.props.onChange(this.toSeconds(pace))\n  }\n\n  toSeconds(pace: Pace): number {\n    return pace[PaceFragment.Minutes] * 60 + pace[PaceFragment.Seconds]\n  }\n\n  toPace(seconds: number): Pace {\n    return {\n      [PaceFragment.Minutes]: Math.floor(seconds / 60),\n      [PaceFragment.Seconds]: seconds % 60,\n    }\n  }\n\n  render() {\n    const pace = this.toPace(this.props.value)\n\n    return (\n      <div className=\"pace-select\">\n        <div className=\"pace-select__label\">{this.props.label}</div>\n        <div className=\"pace-select__input\">\n          <NumberSelect\n            name={PaceFragment.Minutes}\n            value={pace[PaceFragment.Minutes]}\n            max=\"59\"\n            onChange={this.handleChange.bind(this, PaceFragment.Minutes)}\n          />\n          <span className=\"pace-select__separator\">:</span>\n          <NumberSelect\n            name={PaceFragment.Seconds}\n            value={pace[PaceFragment.Seconds]}\n            max=\"59\"\n            pad=\"2\"\n            onChange={this.handleChange.bind(this, PaceFragment.Seconds)}\n          />\n          <span className=\"pace-select__value-label\">min/km</span>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport DurationSelect from './DurationSelect'\nimport DistanceSelect from './DistanceSelect'\nimport PaceSelect from './PaceSelect'\nimport './Calculator.scss'\n\nexport enum CalculatorValue {\n  DurationInSeconds = 'seconds',\n  DistanceInMeters = 'meters',\n  PaceInSeconds = 'pace',\n}\n\ninterface CalculatorState {\n  seconds: number\n  meters: number\n  pace: number\n  changed: CalculatorValue[]\n}\n\nexport default class Calculator extends React.Component<{}, CalculatorState> {\n  readonly defaultState = {\n    [CalculatorValue.DurationInSeconds]: 0,\n    [CalculatorValue.DistanceInMeters]: 0,\n    [CalculatorValue.PaceInSeconds]: 0,\n    changed: [],\n  }\n\n  constructor(props: any) {\n    super(props)\n    this.state = this.defaultState\n    this.handleClear = this.handleClear.bind(this)\n  }\n\n  calculateDistance(duration: number, pace: number): number {\n    const durationInMinutes = duration / 60\n    const paceInMinutes = pace / 60\n    const paceInKilometers = durationInMinutes / paceInMinutes\n    return Math.round(paceInKilometers * 1000)\n  }\n\n  calculateDuration(distance: number, pace: number): number {\n    const distanceInKilometers = distance / 1000\n    const paceInMinutes = pace / 60\n    const durationInMinutes = distanceInKilometers * paceInMinutes\n    return Math.round(durationInMinutes * 60)\n  }\n\n  calculatePace(duration: number, distance: number): number {\n    const distanceInKilometers = distance / 1000\n    const durationInMinutes = duration / 60\n    const paceInMinutes = durationInMinutes / distanceInKilometers\n    return Math.round(paceInMinutes * 60)\n  }\n\n  calculateStateProp(state: CalculatorState, prop: CalculatorValue, calc: () => number): CalculatorState {\n    if (state[prop] === 0 || !state.changed.find((item) => item === prop)) {\n      const value = calc()\n      state[prop] = Number.isFinite(value) ? value : 0\n    }\n    return state\n  }\n\n  handleClear() {\n    this.setState(this.defaultState)\n  }\n\n  handleChange(prop: CalculatorValue, value: number) {\n    this.setState((prevState) => {\n      let nextState = {\n        [CalculatorValue.DurationInSeconds]: prevState[CalculatorValue.DurationInSeconds],\n        [CalculatorValue.DistanceInMeters]: prevState[CalculatorValue.DistanceInMeters],\n        [CalculatorValue.PaceInSeconds]: prevState[CalculatorValue.PaceInSeconds],\n        changed: prevState.changed,\n      }\n      nextState[prop] = value\n\n      // Push current item to the `changed` list, only keep two recent items\n      if (!prevState.changed.some((item) => item === prop)) {\n        if (nextState.changed.push(prop) > 2) {\n          nextState.changed.shift()\n        }\n      }\n\n      nextState = this.calculateStateProp(nextState, CalculatorValue.DurationInSeconds, () => {\n        return this.calculateDuration(\n          nextState[CalculatorValue.DistanceInMeters],\n          nextState[CalculatorValue.PaceInSeconds]\n        )\n      })\n\n      nextState = this.calculateStateProp(nextState, CalculatorValue.DistanceInMeters, () => {\n        return this.calculateDistance(\n          nextState[CalculatorValue.DurationInSeconds],\n          nextState[CalculatorValue.PaceInSeconds]\n        )\n      })\n\n      nextState = this.calculateStateProp(nextState, CalculatorValue.PaceInSeconds, () => {\n        return this.calculatePace(\n          nextState[CalculatorValue.DurationInSeconds],\n          nextState[CalculatorValue.DistanceInMeters]\n        )\n      })\n\n      return nextState\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"calculator\">\n        <div className=\"calculator__header\">\n          <div>Pace Calculator</div>\n          <button onClick={this.handleClear}>Clear</button>\n        </div>\n        <DurationSelect\n          label=\"Time\"\n          value={this.state[CalculatorValue.DurationInSeconds]}\n          onChange={this.handleChange.bind(this, CalculatorValue.DurationInSeconds)}\n        />\n        <DistanceSelect\n          label=\"Distance\"\n          value={this.state[CalculatorValue.DistanceInMeters]}\n          onChange={this.handleChange.bind(this, CalculatorValue.DistanceInMeters)}\n        />\n        <PaceSelect\n          label=\"Pace\"\n          value={this.state[CalculatorValue.PaceInSeconds]}\n          onChange={this.handleChange.bind(this, CalculatorValue.PaceInSeconds)}\n        />\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport Calculator from './components/Calculator/Calculator'\nimport './App.scss'\n\nexport default class App extends React.Component<{}, {}> {\n  render() {\n    return (\n      <div className=\"app\">\n        <Calculator />\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}